# https://bitnodes.io/api/v1/snapshots/?page=1&limit=100
# 'next','results','url','timestamp'
# https://bitnodes.io/api/v1/snapshots/
import time
import requests
import os
import json
import datetime
import math
from sim_cache_info import calculateSimHash,cacheMapCollision
import numpy as np
import pandas as pd
import re
import matplotlib.pyplot as plt
import copy

# 统计出四天内连续在线的v22.0 onion节点列表
def crawlNodeSnapshots(upper, lower):
    # next_url = "https://bitnodes.io/api/v1/snapshots/?page=1&limit=100"
    # crawl_list = []
    # crawl_ts = []
    # current_ts = int(time.time())
    #
    # # 获取目标快照时间集
    # while current_ts > lower:
    #     resp = requests.get(next_url).json()
    #     next_url = resp["next"]
    #     for i in resp["results"]:
    #         current_ts = i["timestamp"]
    #         if i["timestamp"] > upper:
    #             continue
    #         elif i["timestamp"] < lower:
    #             break
    #         else:
    #             crawl_list.append(i["url"])
    #             crawl_ts.append(i["timestamp"])
    #     if current_ts < lower:
    #         break
    #
    # # 获取目标快照内容保存到文件夹
    # for url in crawl_list:
    #     file_name = url.split('/')[-2]
    #     path = "results/attackcost/0715/origin" + '/' + file_name + ".json"
    #     if os.path.exists(path):
    #         continue
    #     while True:
    #         try:
    #             resp = requests.get(url).json()
    #             break
    #         except:
    #             print("Connection refused by the server..")
    #             print("Let me sleep for 10 seconds")
    #             print("ZZzzzz...")
    #             time.sleep(10)
    #             continue
    #     with open(path, 'w+') as f:
    #         f.write(json.dumps(resp))
    #         f.close()
    #     print("----" + file_name + " finished----")

    # 统计 22.0 onion节点 四天在线情况
    # crawl_ts.sort(reverse=False)
    crawl_ts=[1657555254, 1657555552, 1657555850, 1657556159, 1657556482, 1657556760, 1657557068, 1657557376, 1657557674, 1657557982, 1657558280, 1657558587, 1657558885, 1657559193, 1657559500, 1657559798, 1657560096, 1657560394, 1657560702, 1657561010, 1657561318, 1657561626, 1657561934, 1657562242, 1657562562, 1657562880, 1657563198, 1657563515, 1657563834, 1657564151, 1657564479, 1657564807, 1657565146, 1657565474, 1657565813, 1657566151, 1657566489, 1657566828, 1657567166, 1657567514, 1657567853, 1657568201, 1657568559, 1657568897, 1657569255, 1657569615, 1657569984, 1657570342, 1657570711, 1657571079, 1657571449, 1657571808, 1657572176, 1657572546, 1657572925, 1657573314, 1657573692, 1657574071, 1657574439, 1657574828, 1657575217, 1657575605, 1657575994, 1657576382, 1657576781, 1657577180, 1657577578, 1657577967, 1657578376, 1657578785, 1657579194, 1657579603, 1657580002, 1657580410, 1657580829, 1657581248, 1657581680, 1657582109, 1657582537, 1657582959, 1657583398, 1657583838, 1657584267, 1657584716, 1657585165, 1657585614, 1657586063, 1657586502, 1657586951, 1657587400, 1657587849, 1657588298, 1657588748, 1657589208, 1657589667, 1657590126, 1657590574, 1657591033, 1657591513, 1657591992, 1657592466, 1657592945, 1657593404, 1657593853, 1657594312, 1657594781, 1657595231, 1657595680, 1657596119, 1657596558, 1657596978, 1657597397, 1657597816, 1657598225, 1657598643, 1657599072, 1657599491, 1657599900, 1657600299, 1657600718, 1657601117, 1657601516, 1657601904, 1657602283, 1657602661, 1657603050, 1657603428, 1657603797, 1657604155, 1657604524, 1657604892, 1657605260, 1657605618, 1657605987, 1657606335, 1657606663, 1657607001, 1657607360, 1657607698, 1657608027, 1657608375, 1657608693, 1657609031, 1657609360, 1657609698, 1657610016, 1657610344, 1657610662, 1657611000, 1657611328, 1657611646, 1657611973, 1657612291, 1657612609, 1657612917, 1657613225, 1657613543, 1657613872, 1657614201, 1657614529, 1657614847, 1657615144, 1657615462, 1657615770, 1657616078, 1657616375, 1657616673, 1657616991, 1657617299, 1657617607, 1657617925, 1657618223, 1657618530, 1657618828, 1657619126, 1657619433, 1657619731, 1657620029, 1657620326, 1657620624, 1657620932, 1657621229, 1657621527, 1657621825, 1657622133, 1657622421, 1657622719, 1657623016, 1657623314, 1657623611, 1657623919, 1657624206, 1657624514, 1657624812, 1657625110, 1657625398, 1657625695, 1657625993, 1657626291, 1657626589, 1657626888, 1657627205, 1657627503, 1657627790, 1657628098, 1657628386, 1657628694, 1657628992, 1657629289, 1657629577, 1657629885, 1657630182, 1657630480, 1657630778, 1657631086, 1657631393, 1657631691, 1657631979, 1657632287, 1657632585, 1657632883, 1657633170, 1657633478, 1657633796, 1657634104, 1657634392, 1657634700, 1657634988, 1657635306, 1657635604, 1657635902, 1657636190, 1657636497, 1657636805, 1657637103, 1657637401, 1657637719, 1657638027, 1657638355, 1657638655, 1657638955, 1657639242, 1657639550, 1657639869, 1657640177, 1657640485, 1657640774, 1657641081, 1657641389, 1657641708, 1657642026, 1657642324, 1657642632, 1657642941, 1657643259, 1657643567, 1657643875, 1657644173, 1657644471, 1657644779, 1657645067, 1657645355, 1657645653, 1657645951, 1657646249, 1657646557, 1657646855, 1657647153, 1657647451, 1657647749, 1657648057, 1657648355, 1657648662, 1657648960, 1657649268, 1657649566, 1657649864, 1657650162, 1657650470, 1657650757, 1657651065, 1657651373, 1657651671, 1657651968, 1657652276, 1657652585, 1657652883, 1657653191, 1657653509, 1657653819, 1657654127, 1657654427, 1657654735, 1657655053, 1657655371, 1657655689, 1657656007, 1657656325, 1657656643, 1657656961, 1657657289, 1657657618, 1657657936, 1657658274, 1657658602, 1657658930, 1657659279, 1657659617, 1657659966, 1657660304, 1657660652, 1657660990, 1657661338, 1657661677, 1657662016, 1657662374, 1657662693, 1657663031, 1657663370, 1657663718, 1657664056, 1657664394, 1657664733, 1657665071, 1657665409, 1657665747, 1657666075, 1657666393, 1657666731, 1657667059, 1657667397, 1657667725, 1657668067, 1657668385, 1657668703, 1657669031, 1657669349, 1657669667, 1657669995, 1657670323, 1657670650, 1657670989, 1657671317, 1657671645, 1657671982, 1657672331, 1657672679, 1657673027, 1657673376, 1657673713, 1657674083, 1657674421, 1657674769, 1657675097, 1657675435, 1657675773, 1657676110, 1657676449, 1657676787, 1657677105, 1657677443, 1657677781, 1657678109, 1657678437, 1657678754, 1657679083, 1657679411, 1657679728, 1657680046, 1657680354, 1657680662, 1657680959, 1657681277, 1657681585, 1657681893, 1657682211, 1657682519, 1657682827, 1657683124, 1657683422, 1657683730, 1657684047, 1657684355, 1657684663, 1657684981, 1657685299, 1657685616, 1657685945, 1657686262, 1657686570, 1657686888, 1657687216, 1657687534, 1657687841, 1657688159, 1657688467, 1657688775, 1657689073, 1657689381, 1657689678, 1657689976, 1657690284, 1657690581, 1657690879, 1657691176, 1657691484, 1657691782, 1657692100, 1657692408, 1657692726, 1657693044, 1657693352, 1657693659, 1657693977, 1657694285, 1657694602, 1657694910, 1657695228, 1657695536, 1657695844, 1657696161, 1657696469, 1657696787, 1657697095, 1657697413, 1657697710, 1657698018, 1657698325, 1657698633, 1657698941, 1657699238, 1657699526, 1657699823, 1657700141, 1657700452, 1657700759, 1657701057, 1657701375, 1657701673, 1657701960, 1657702258, 1657702556, 1657702854, 1657703152, 1657703460, 1657703757, 1657704075, 1657704373, 1657704660, 1657704958, 1657705256, 1657705543, 1657705841, 1657706138, 1657706447, 1657706744, 1657707052, 1657707350, 1657707653, 1657707951, 1657708250, 1657708557, 1657708865, 1657709153, 1657709451, 1657709749, 1657710051, 1657710339, 1657710647, 1657710945, 1657711256, 1657711554, 1657711852, 1657712150, 1657712459, 1657712756, 1657713054, 1657713352, 1657713655, 1657713963, 1657714260, 1657714558, 1657714859, 1657715137, 1657715444, 1657715742, 1657716040, 1657716317, 1657716635, 1657716943, 1657717253, 1657717551, 1657717799, 1657718079, 1657718387, 1657718735, 1657719023, 1657719300, 1657719628, 1657719926, 1657720193, 1657720511, 1657720856, 1657721184, 1657721512, 1657721840, 1657722159, 1657722477, 1657722795, 1657723124, 1657723452, 1657723770, 1657724089, 1657724418, 1657724736, 1657725054, 1657725372, 1657725700, 1657726010, 1657726318, 1657726626, 1657726934, 1657727242, 1657727582, 1657727900, 1657728229, 1657728537, 1657728865, 1657729183, 1657729501, 1657729819, 1657730137, 1657730465, 1657730762, 1657731060, 1657731358, 1657731666, 1657731974, 1657732272, 1657732581, 1657732888, 1657733196, 1657733504, 1657733811, 1657734121, 1657734419, 1657734727, 1657735035, 1657735344, 1657735651, 1657735969, 1657736277, 1657736585, 1657736893, 1657737201, 1657737509, 1657737817, 1657738135, 1657738443, 1657738751, 1657739059, 1657739377, 1657739685, 1657740004, 1657740312, 1657740619, 1657740928, 1657741236, 1657741544, 1657741852, 1657742159, 1657742470, 1657742778, 1657743086, 1657743394, 1657743702, 1657744021, 1657744329, 1657744637, 1657744937, 1657745245, 1657745552, 1657745870, 1657746189, 1657746497, 1657746805, 1657747123, 1657747441, 1657747759, 1657748077, 1657748385, 1657748683, 1657749001, 1657749309, 1657749617, 1657749936, 1657750244, 1657750562, 1657750881, 1657751189, 1657751497, 1657751805, 1657752113, 1657752421, 1657752729, 1657753026, 1657753334, 1657753642, 1657753960, 1657754278, 1657754586, 1657754903, 1657755211, 1657755520, 1657755828, 1657756126, 1657756433, 1657756741, 1657757050, 1657757367, 1657757676, 1657757994, 1657758302, 1657758609, 1657758917, 1657759214, 1657759522, 1657759830, 1657760138, 1657760445, 1657760754, 1657761062, 1657761370, 1657761678, 1657761985, 1657762293, 1657762601, 1657762919, 1657763237, 1657763565, 1657763883, 1657764192, 1657764509, 1657764828, 1657765145, 1657765473, 1657765791, 1657766109, 1657766417, 1657766725, 1657767022, 1657767330, 1657767638, 1657767945, 1657768253, 1657768561, 1657768869, 1657769177, 1657769475, 1657769783, 1657770080, 1657770388, 1657770687, 1657770995, 1657771303, 1657771611, 1657771919, 1657772216, 1657772514, 1657772811, 1657773109, 1657773427, 1657773725, 1657774042, 1657774360, 1657774678, 1657774996, 1657775314, 1657775621, 1657775919, 1657776206, 1657776463, 1657776731, 1657777028, 1657777326, 1657777623, 1657777920, 1657778228, 1657778516, 1657778873, 1657779202, 1657779489, 1657779787, 1657780114, 1657780422, 1657780740, 1657781058, 1657781375, 1657781683, 1657781980, 1657782269, 1657782566, 1657782864, 1657783161, 1657783469, 1657783767, 1657784075, 1657784372, 1657784670, 1657784968, 1657785266, 1657785573, 1657785874, 1657786172, 1657786479, 1657786777, 1657787085, 1657787392, 1657787700, 1657788008, 1657788316, 1657788623, 1657788931, 1657789239, 1657789546, 1657789844, 1657790142, 1657790453, 1657790741, 1657791050, 1657791349, 1657791649, 1657791948, 1657792256, 1657792554, 1657792862, 1657793160, 1657793448, 1657793746, 1657794067, 1657794364, 1657794673, 1657794970, 1657795268, 1657795576, 1657795864, 1657796151, 1657796439, 1657796736, 1657797044, 1657797341, 1657797639, 1657797937, 1657798244, 1657798542, 1657798850, 1657799158, 1657799467, 1657799754, 1657800053, 1657800351, 1657800650, 1657800949, 1657801252, 1657801550, 1657801849, 1657802148, 1657802436, 1657802754, 1657803062, 1657803359, 1657803653, 1657803951, 1657804238, 1657804536, 1657804843, 1657805141, 1657805439, 1657805746, 1657806054, 1657806352, 1657806650, 1657806948, 1657807248, 1657807567, 1657807864, 1657808162, 1657808474, 1657808762, 1657809051, 1657809359, 1657809667, 1657809965, 1657810254, 1657810551, 1657810853, 1657811162, 1657811460, 1657811758, 1657812078, 1657812376, 1657812654, 1657812963, 1657813250, 1657813538, 1657813837, 1657814145, 1657814423, 1657814742, 1657815029, 1657815337, 1657815625, 1657815944, 1657816232, 1657816540, 1657816828, 1657817146, 1657817424, 1657817732, 1657818021, 1657818328, 1657818627, 1657818944, 1657819232, 1657819540, 1657819838, 1657820146, 1657820433, 1657820731, 1657821039, 1657821337, 1657821625, 1657821943, 1657822241, 1657822529, 1657822827, 1657823135, 1657823433, 1657823731, 1657824029, 1657824328, 1657824625, 1657824933, 1657825232, 1657825530, 1657825828, 1657826126, 1657826434, 1657826732, 1657827030, 1657827337, 1657827636, 1657827943, 1657828241, 1657828539, 1657828837, 1657829135, 1657829443, 1657829751, 1657830053, 1657830361, 1657830660, 1657830968, 1657831287, 1657831605, 1657831923, 1657832242, 1657832563, 1657832871, 1657833169, 1657833477, 1657833775, 1657834073, 1657834371, 1657834659, 1657834968, 1657835256, 1657835554, 1657835862, 1657836161, 1657836479, 1657836778, 1657837096, 1657837413, 1657837731, 1657838059, 1657838377, 1657838708, 1657839036, 1657839354, 1657839673, 1657839981, 1657840299, 1657840597, 1657840895, 1657841202, 1657841500, 1657841798, 1657842106, 1657842414, 1657842731, 1657843039, 1657843348, 1657843656, 1657843974, 1657844251, 1657844509, 1657844816, 1657845134, 1657845441, 1657845760, 1657846067, 1657846355, 1657846663, 1657846961, 1657847259, 1657847559, 1657847867, 1657848155, 1657848462, 1657848770, 1657849068, 1657849365, 1657849653, 1657849960, 1657850268, 1657850566, 1657850883, 1657851181, 1657851489, 1657851807, 1657852134, 1657852462, 1657852790, 1657853108, 1657853406, 1657853713, 1657854021, 1657854339, 1657854657, 1657854975, 1657855283, 1657855601, 1657855908, 1657856206, 1657856524, 1657856842, 1657857149, 1657857447, 1657857755, 1657858063, 1657858370, 1657858668, 1657858966, 1657859263, 1657859571, 1657859888, 1657860196, 1657860494, 1657860791, 1657861079, 1657861387, 1657861684, 1657861972, 1657862280, 1657862577, 1657862875, 1657863173, 1657863481, 1657863778, 1657864076, 1657864384, 1657864692, 1657864990, 1657865287, 1657865595, 1657865873, 1657866181, 1657866468, 1657866766, 1657867084, 1657867382, 1657867669, 1657867978, 1657868285, 1657868583, 1657868881, 1657869178, 1657869476, 1657869784, 1657870082, 1657870379, 1657870677, 1657870677, 1657870975, 1657871262, 1657871560, 1657871857, 1657872175, 1657872473, 1657872781, 1657873079, 1657873368, 1657873665, 1657873963, 1657874270, 1657874568, 1657874856, 1657875164, 1657875462, 1657875761, 1657876059, 1657876357, 1657876665, 1657876952, 1657877260, 1657877548, 1657877866, 1657878153, 1657878451, 1657878758, 1657879047, 1657879354, 1657879662, 1657879950, 1657880248, 1657880545, 1657880853, 1657881161, 1657881449, 1657881756, 1657882054, 1657882361, 1657882649, 1657882946, 1657883254, 1657883552, 1657883850, 1657884138, 1657884436, 1657884743, 1657885041, 1657885339, 1657885637, 1657885945, 1657886242, 1657886540, 1657886827, 1657887126, 1657887434, 1657887741, 1657888039, 1657888337, 1657888635, 1657888932, 1657889230, 1657889528, 1657889815, 1657890124, 1657890431, 1657890729, 1657891027, 1657891345, 1657891652, 1657891940, 1657892238, 1657892538, 1657892835, 1657893133, 1657893441, 1657893749, 1657894047, 1657894345, 1657894643, 1657894941, 1657895249, 1657895547, 1657895855, 1657896153, 1657896452, 1657896759, 1657897058, 1657897356, 1657897653, 1657897951, 1657898249, 1657898547, 1657898845, 1657899153, 1657899461, 1657899749, 1657900047, 1657900367]
    print(crawl_ts)
    online_data = {}
    for fts in crawl_ts:
        path = "results/attackcost/0715/origin" + '/' + str(fts) + ".json"
        with open(path, 'r') as f:
            data = json.load(f)
        nodes = data["nodes"]
        for addr in nodes:
            if "onion" not in addr or "/Satoshi:22.0.0/" not in nodes[addr][1]:
                continue
            if addr not in online_data:
                online_data[addr] = [False, False, False, False]
            online_data[addr][int((fts-lower)/(3600*24))] = True
        print("----" + str(fts) + " finished----")
    print("四天内出现过的节点总数为"+str(len(online_data)))

    target_nodes = []
    for addr in online_data:
        if sum(online_data[addr]) == 4:
            target_nodes.append(addr)
    print("四天内连续在线的节点总数为" + str(len(target_nodes)))
    with open("results/attackcost/0715/target_nodes.json", 'w+') as f:
        f.write(json.dumps(target_nodes))


# 统计每张快照中 基本信息不同、块高度相差两个及以上 的地址对: 拆分
def filteringByNodeInfo(upper, lower):
    with open("results/attackcost/0715/target_nodes.json", 'r+') as f:
        target_nodes = json.loads(f.read())

    target_files = []
    path = "results/attackcost/0715/origin/"
    # g = os.walk("results/attackcost/0715/origin/")
    # for path, dir_list, file_list in g:
    #     for file_name in file_list:
    #         if lower <= int(file_name[0:10]) <= upper:
    for file_name in [ 1657844509, 1657844816, 1657845134, 1657845441, 1657845760, 1657846067, 1657846355, 1657846663, 1657846961, 1657847259, 1657847559, 1657847867, 1657848155, 1657848462, 1657848770, 1657849068, 1657849365, 1657849653, 1657849960, 1657850268, 1657850566, 1657850883, 1657851181, 1657851489, 1657851807, 1657852134, 1657852462, 1657852790, 1657853108, 1657853406, 1657853713, 1657854021, 1657854339, 1657854657, 1657854975, 1657855283, 1657855601, 1657855908, 1657856206, 1657856524, 1657856842, 1657857149, 1657857447, 1657857755, 1657858063, 1657858370, 1657858668, 1657858966, 1657859263, 1657859571, 1657859888, 1657860196, 1657860494, 1657860791, 1657861079, 1657861387, 1657861684, 1657861972, 1657862280, 1657862577, 1657862875, 1657863173, 1657863481, 1657863778, 1657864076, 1657864384, 1657864692, 1657864990, 1657865287, 1657865595, 1657865873, 1657866181, 1657866468, 1657866766, 1657867084, 1657867382, 1657867669, 1657867978, 1657868285, 1657868583, 1657868881, 1657869178, 1657869476, 1657869784, 1657870082, 1657870379, 1657870677, 1657870677, 1657870975, 1657871262, 1657871560, 1657871857, 1657872175, 1657872473, 1657872781, 1657873079, 1657873368, 1657873665, 1657873963, 1657874270, 1657874568, 1657874856, 1657875164, 1657875462, 1657875761, 1657876059, 1657876357, 1657876665, 1657876952, 1657877260, 1657877548, 1657877866, 1657878153, 1657878451, 1657878758, 1657879047, 1657879354, 1657879662, 1657879950, 1657880248, 1657880545, 1657880853, 1657881161, 1657881449, 1657881756, 1657882054, 1657882361, 1657882649, 1657882946, 1657883254, 1657883552, 1657883850, 1657884138, 1657884436, 1657884743, 1657885041, 1657885339, 1657885637, 1657885945, 1657886242, 1657886540, 1657886827, 1657887126, 1657887434, 1657887741, 1657888039, 1657888337, 1657888635, 1657888932, 1657889230, 1657889528, 1657889815, 1657890124, 1657890431, 1657890729, 1657891027, 1657891345, 1657891652, 1657891940, 1657892238, 1657892538, 1657892835, 1657893133, 1657893441, 1657893749, 1657894047, 1657894345, 1657894643, 1657894941, 1657895249, 1657895547, 1657895855, 1657896153, 1657896452, 1657896759, 1657897058, 1657897356, 1657897653, 1657897951, 1657898249, 1657898547, 1657898845, 1657899153, 1657899461, 1657899749, 1657900047, 1657900367]:
                file_name = str(file_name)+'.json'
                target_files.append(os.path.join(path, file_name))
    # 1657555254->1657569984
    # target_files = ['results/attackcost/0715/origin/1657555254.json']

    filtering_peers = []
    for file in target_files:
        print(file)
        # with open("results/attackcost/0715/tmp/1657555254-1000_2000.json", 'r+') as f:
        #     filtering_peers = json.loads(f.read())
        # 转换成set提供搜索效率
        filtering_peers = [str(x) for x in filtering_peers]
        filtering_peers = set(filtering_peers)
        # print(len(filtering_peers))
        # filtering_peers = []
        with open(file, 'r+') as d:
            nodes = json.loads(d.read())['nodes']
        for i in range(0, len(target_nodes)):
            if i%500 == 0:
                print("进度: "+str(i/len(target_nodes)))
            a = target_nodes[i]
            if a not in nodes:
                continue
            for j in range(i+1, len(target_nodes)):
                b = target_nodes[j]
                if b not in nodes or '['+str(i)+', '+str(j)+']' in filtering_peers:
                    continue
                info_a,info_b = nodes[a],nodes[b]
                if info_a[0] != info_b[0] or info_a[1] != info_b[1] \
                        or info_a[3] != info_b[3] or not abs(info_a[4]-info_b[4]) <= 2:
                    pass
                else:
                    continue
                # print([i, j])
                filtering_peers.add('['+str(i)+', '+str(j)+']')
        # 还原成list存储
        filtering_peers = [json.loads(x) for x in filtering_peers]
        print("----" + str(file) + " finished----")
        print("当前过滤掉的地址对数为" + str(len(filtering_peers)))
        with open("results/attackcost/0715/filteringByNodeInfo.json", 'w+') as f:
            f.write(json.dumps(filtering_peers))

    print("按照基本信息初步过滤掉的地址对数为" + str(len(filtering_peers)))
    with open("results/attackcost/0715/filteringByNodeInfo.json", 'w+') as f:
        f.write(json.dumps(filtering_peers))


# 统计每张快照中 基本信息不同、块高度相差两个及以上 的地址对: 拆分
def reverse_filteringByNodeInfo(upper, lower):
    with open("results/attackcost/0715/target_nodes.json", 'r+') as f:
        target_nodes = json.loads(f.read())

    target_files = []
    path = "results/attackcost/0715/origin/"
    for file_name in [1657697710, 1657698018, 1657698325, 1657698633, 1657698941, 1657699238, 1657699526, 1657699823, 1657700141, 1657700452, 1657700759, 1657701057, 1657701375, 1657701673, 1657701960, 1657702258, 1657702556, 1657702854, 1657703152, 1657703460, 1657703757, 1657704075, 1657704373, 1657704660, 1657704958, 1657705256, 1657705543, 1657705841, 1657706138, 1657706447, 1657706744, 1657707052, 1657707350, 1657707653, 1657707951, 1657708250, 1657708557, 1657708865, 1657709153, 1657709451, 1657709749, 1657710051, 1657710339, 1657710647, 1657710945, 1657711256, 1657711554, 1657711852, 1657712150, 1657712459, 1657712756, 1657713054, 1657713352, 1657713655, 1657713963, 1657714260, 1657714558, 1657714859, 1657715137, 1657715444, 1657715742, 1657716040, 1657716317, 1657716635, 1657716943, 1657717253, 1657717551, 1657717799, 1657718079, 1657718387, 1657718735, 1657719023, 1657719300, 1657719628, 1657719926, 1657720193, 1657720511, 1657720856, 1657721184, 1657721512, 1657721840, 1657722159, 1657722477, 1657722795, 1657723124, 1657723452, 1657723770, 1657724089, 1657724418, 1657724736, 1657725054, 1657725372, 1657725700, 1657726010, 1657726318, 1657726626, 1657726934, 1657727242, 1657727582, 1657727900, 1657728229, 1657728537, 1657728865, 1657729183, 1657729501, 1657729819, 1657730137, 1657730465, 1657730762, 1657731060, 1657731358, 1657731666, 1657731974, 1657732272, 1657732581, 1657732888, 1657733196, 1657733504, 1657733811, 1657734121, 1657734419, 1657734727, 1657735035, 1657735344, 1657735651, 1657735969, 1657736277, 1657736585, 1657736893, 1657737201, 1657737509, 1657737817, 1657738135, 1657738443, 1657738751, 1657739059, 1657739377, 1657739685, 1657740004, 1657740312, 1657740619, 1657740928, 1657741236, 1657741544, 1657741852, 1657742159, 1657742470, 1657742778, 1657743086, 1657743394, 1657743702, 1657744021, 1657744329, 1657744637, 1657744937, 1657745245, 1657745552, 1657745870, 1657746189, 1657746497, 1657746805, 1657747123, 1657747441, 1657747759, 1657748077, 1657748385, 1657748683, 1657749001, 1657749309, 1657749617, 1657749936, 1657750244, 1657750562, 1657750881, 1657751189, 1657751497, 1657751805, 1657752113, 1657752421, 1657752729, 1657753026, 1657753334, 1657753642, 1657753960, 1657754278, 1657754586, 1657754903, 1657755211, 1657755520, 1657755828, 1657756126, 1657756433, 1657756741, 1657757050, 1657757367, 1657757676, 1657757994, 1657758302, 1657758609, 1657758917, 1657759214, 1657759522, 1657759830, 1657760138, 1657760445, 1657760754, 1657761062, 1657761370, 1657761678, 1657761985, 1657762293, 1657762601, 1657762919, 1657763237, 1657763565, 1657763883, 1657764192, 1657764509, 1657764828, 1657765145, 1657765473, 1657765791, 1657766109, 1657766417, 1657766725, 1657767022, 1657767330, 1657767638, 1657767945, 1657768253, 1657768561, 1657768869, 1657769177, 1657769475, 1657769783, 1657770080, 1657770388, 1657770687, 1657770995, 1657771303, 1657771611, 1657771919, 1657772216, 1657772514, 1657772811, 1657773109, 1657773427, 1657773725, 1657774042, 1657774360, 1657774678, 1657774996, 1657775314, 1657775621, 1657775919, 1657776206, 1657776463, 1657776731, 1657777028, 1657777326, 1657777623, 1657777920, 1657778228, 1657778516, 1657778873, 1657779202, 1657779489, 1657779787, 1657780114, 1657780422, 1657780740, 1657781058, 1657781375, 1657781683, 1657781980, 1657782269, 1657782566, 1657782864, 1657783161, 1657783469, 1657783767, 1657784075, 1657784372, 1657784670, 1657784968, 1657785266, 1657785573, 1657785874, 1657786172, 1657786479, 1657786777, 1657787085, 1657787392, 1657787700, 1657788008, 1657788316, 1657788623, 1657788931, 1657789239, 1657789546, 1657789844, 1657790142, 1657790453, 1657790741, 1657791050, 1657791349, 1657791649, 1657791948, 1657792256, 1657792554, 1657792862, 1657793160, 1657793448, 1657793746, 1657794067, 1657794364, 1657794673, 1657794970, 1657795268, 1657795576, 1657795864, 1657796151, 1657796439, 1657796736, 1657797044, 1657797341, 1657797639, 1657797937, 1657798244, 1657798542, 1657798850, 1657799158, 1657799467, 1657799754, 1657800053, 1657800351, 1657800650, 1657800949, 1657801252, 1657801550, 1657801849, 1657802148, 1657802436, 1657802754, 1657803062, 1657803359, 1657803653, 1657803951, 1657804238, 1657804536, 1657804843, 1657805141, 1657805439, 1657805746, 1657806054, 1657806352, 1657806650, 1657806948, 1657807248, 1657807567, 1657807864, 1657808162, 1657808474, 1657808762, 1657809051, 1657809359, 1657809667, 1657809965, 1657810254, 1657810551, 1657810853, 1657811162, 1657811460, 1657811758, 1657812078, 1657812376, 1657812654, 1657812963, 1657813250, 1657813538, 1657813837, 1657814145, 1657814423, 1657814742, 1657815029, 1657815337, 1657815625, 1657815944, 1657816232, 1657816540, 1657816828, 1657817146, 1657817424, 1657817732, 1657818021, 1657818328, 1657818627, 1657818944, 1657819232, 1657819540, 1657819838, 1657820146, 1657820433, 1657820731, 1657821039, 1657821337, 1657821625, 1657821943, 1657822241, 1657822529, 1657822827, 1657823135, 1657823433, 1657823731, 1657824029, 1657824328, 1657824625, 1657824933, 1657825232, 1657825530, 1657825828, 1657826126, 1657826434, 1657826732, 1657827030, 1657827337, 1657827636, 1657827943, 1657828241, 1657828539, 1657828837, 1657829135, 1657829443, 1657829751, 1657830053, 1657830361, 1657830660, 1657830968, 1657831287, 1657831605, 1657831923, 1657832242, 1657832563, 1657832871, 1657833169, 1657833477, 1657833775, 1657834073, 1657834371, 1657834659, 1657834968, 1657835256, 1657835554, 1657835862, 1657836161, 1657836479, 1657836778, 1657837096, 1657837413, 1657837731, 1657838059, 1657838377, 1657838708, 1657839036, 1657839354, 1657839673, 1657839981, 1657840299, 1657840597, 1657840895, 1657841202, 1657841500, 1657841798, 1657842106, 1657842414, 1657842731, 1657843039, 1657843348, 1657843656, 1657843974, 1657844251, 1657844509, 1657844816, 1657845134, 1657845441, 1657845760, 1657846067, 1657846355, 1657846663, 1657846961, 1657847259, 1657847559, 1657847867, 1657848155, 1657848462, 1657848770, 1657849068, 1657849365, 1657849653, 1657849960, 1657850268, 1657850566, 1657850883, 1657851181, 1657851489, 1657851807, 1657852134, 1657852462, 1657852790, 1657853108, 1657853406, 1657853713, 1657854021, 1657854339, 1657854657, 1657854975, 1657855283, 1657855601, 1657855908, 1657856206, 1657856524, 1657856842, 1657857149, 1657857447, 1657857755, 1657858063, 1657858370, 1657858668, 1657858966, 1657859263, 1657859571, 1657859888, 1657860196, 1657860494, 1657860791, 1657861079, 1657861387, 1657861684, 1657861972, 1657862280, 1657862577, 1657862875, 1657863173, 1657863481, 1657863778, 1657864076, 1657864384, 1657864692, 1657864990, 1657865287, 1657865595, 1657865873, 1657866181, 1657866468, 1657866766, 1657867084, 1657867382, 1657867669, 1657867978, 1657868285, 1657868583, 1657868881, 1657869178, 1657869476, 1657869784, 1657870082, 1657870379, 1657870677, 1657870677, 1657870975, 1657871262, 1657871560, 1657871857, 1657872175, 1657872473, 1657872781, 1657873079, 1657873368, 1657873665, 1657873963, 1657874270, 1657874568, 1657874856, 1657875164, 1657875462, 1657875761, 1657876059, 1657876357, 1657876665, 1657876952, 1657877260, 1657877548, 1657877866, 1657878153, 1657878451, 1657878758, 1657879047, 1657879354, 1657879662, 1657879950, 1657880248, 1657880545, 1657880853, 1657881161, 1657881449, 1657881756, 1657882054, 1657882361, 1657882649, 1657882946, 1657883254, 1657883552, 1657883850, 1657884138, 1657884436, 1657884743, 1657885041, 1657885339, 1657885637, 1657885945, 1657886242, 1657886540, 1657886827, 1657887126, 1657887434, 1657887741, 1657888039, 1657888337, 1657888635, 1657888932, 1657889230, 1657889528, 1657889815, 1657890124, 1657890431, 1657890729, 1657891027, 1657891345, 1657891652, 1657891940, 1657892238, 1657892538, 1657892835, 1657893133, 1657893441, 1657893749, 1657894047, 1657894345, 1657894643, 1657894941, 1657895249, 1657895547, 1657895855, 1657896153, 1657896452, 1657896759, 1657897058, 1657897356, 1657897653, 1657897951, 1657898249, 1657898547, 1657898845, 1657899153, 1657899461, 1657899749, 1657900047, 1657900367]:
        file_name = str(file_name)+'.json'
        target_files.append(os.path.join(path, file_name))

    with open("results/attackcost/0715/remaining.json", 'r+') as f:
        remaining_peers = json.loads(f.read())
    for file in target_files:
        print(file)
        with open(file, 'r+') as d:
            nodes = json.loads(d.read())['nodes']
        update_peers = copy.deepcopy(remaining_peers)
        for i in range(0, len(remaining_peers)):
            if i%5000 == 0:
                print("进度: "+str(i/len(remaining_peers)))
            pair = remaining_peers[i]
            a = target_nodes[pair[0]]
            if a not in nodes:
                continue
            b = target_nodes[pair[1]]
            if b not in nodes:
                continue
            info_a,info_b = nodes[a],nodes[b]
            if info_a[0] != info_b[0] or info_a[1] != info_b[1] \
                    or info_a[3] != info_b[3] or not abs(info_a[4]-info_b[4]) <= 2:
                update_peers.remove(pair)
            else:
                continue
        remaining_peers = copy.deepcopy(update_peers)
        print("----" + str(file) + " finished----")
        print("当前剩余的地址对数为" + str(len(remaining_peers)))
        with open("results/attackcost/0715/remaining.json", 'w+') as f:
            f.write(json.dumps(remaining_peers))


# 统计每张快照中 基本信息不同、块高度相差两个及以上 的地址对: 汇总
def calculateNodeInfo():
    target_files = []
    g = os.walk("results/attackcost/0715/tmp/")
    for path, dir_list, file_list in g:
        for file_name in file_list:
            # if lower <= int(file_name[0:10]) <= upper:
            if int(file_name[0:10]) == 1657555254:
                target_files.append(os.path.join(path, file_name))

    filtering_peers = []
    for file in target_files:
        print(file)
        with open(file, 'r+') as d:
            part_info = json.loads(d.read())
        filtering_peers += part_info

    print("按照基本信息初步过滤掉的地址对数为" + str(len(filtering_peers)))
    with open("results/attackcost/0715/nodeinfo/1657555254.json", 'w+') as f:
        f.write(json.dumps(filtering_peers))


# 按照缓存信息过滤无关地址对
def filteringByCacheInfo(date):
    calculateSimHash(date + ' 00:00')
    cacheMapCollision(date, date)


# 获取剩余的地址对
def calculateRemainingPeers():
    with open("results/attackcost/0715/target_nodes.json", 'r+') as f:
        target_nodes = json.loads(f.read())
    with open("results/attackcost/0715/filteringByNodeInfo_1657697413.json", 'r+') as f:
        filtering_on = json.loads(f.read())
    with open("results/attackcost/0715/filteringByNodeInfo_1657844251.json", 'r+') as f:
        filtering_tw = json.loads(f.read())
    with open("results/attackcost/0715/filteringByNodeInfo.json", 'r+') as f:
        filtering_th = json.loads(f.read())
    with open('results/attackcost/0715/filteringByCacheInfo.json', 'r+') as f:
        filtering_2 = json.loads(f.read())

    filtering_on = [str(x) for x in filtering_on]
    filtering_tw = [str(x) for x in filtering_tw]
    filtering_th = [str(x) for x in filtering_th]

    filtering_peers = list(set(filtering_on).union(set(filtering_tw)))
    filtering_peers = list(set(filtering_peers).union(set(filtering_th)))
    print("基本信息过滤掉的地址对数为" + str(len(filtering_peers)))

    filtering_2 = [str(x) for x in filtering_2]
    filtering_peers = list(set(filtering_peers).union(set(filtering_2)))
    print("合并后过滤掉的地址对数为" + str(len(filtering_peers)))

    total = []
    for i in range(0, len(target_nodes)):
        for j in range(i+1, len(target_nodes)):
            total.append([i, j])
    print("total ok")
    total = [str(x) for x in total]
    remaining = list(set(total).difference(set(filtering_peers)))
    remaining = [json.loads(x) for x in remaining]
    print("剩余待处理的地址对数为" + str(len(remaining)))
    with open("results/attackcost/0715/remaining_peers.json", 'w+') as f:
        f.write(json.dumps(remaining))


# 统计池子个数、中等池子大小
def analysisPoolSize():
    with open("results/attackcost/0715/remaining_peers.json", 'r+') as f:
        remaining = json.loads(f.read())
    with open("results/attackcost/0715/target_nodes.json", 'r+') as f:
        target_nodes = json.loads(f.read())

    pools = {}
    num = 0
    for i in range(0, len(remaining)):
        pair = remaining[i]
        a = target_nodes[pair[0]]
        b = target_nodes[pair[1]]
        if a not in pools:
            pools[a] = []
        flag = False
        for value in range(0,len(pools[a])):
            if pools[a][value] == b:
                flag = True
                break
        if not flag:
            num += 1
            pools[a].append(b)

        if b not in pools:
            pools[b] = []
        flag = False
        for value in range(0, len(pools[b])):
            if pools[b][value] == a:
                flag = True
                break
        if not flag:
            num += 1
            pools[b].append(a)

    pd.DataFrame.from_dict(data=pools, orient='index').to_csv('results/attackcost/0715/pools.csv', header=False)
    print("OVER")

    print(num)
    print(len(pools))
    pool_sizes = []
    for addr in pools:
        pool_sizes.append(len(pools[addr]))
    with open("results/attackcost/0715/pool_sizes.json", 'w+') as f:
        f.write(json.dumps(pool_sizes))
    print(np.mean(pool_sizes))
    print(np.median(pool_sizes))
    print(np.max(pool_sizes))
    print(np.min(pool_sizes))
    return

def test():
    y = []
    with open('attackcost_analysis.out','r') as f:
        for line in f.readlines():
            if "当前过滤掉的地址对数为" in line:
                y.append(int("".join(re.findall(r'为[^ ]*', line))[1:]))

    with open('results/attackcost/0715/r_1657697413.out','r') as f:
        for line in f.readlines():
            if "当前剩余的地址对数为" in line:
                y.append(10545528-int("".join(re.findall(r'为[^ ]*', line))[1:]))

    # TODO:1)百分比折线图;2)池子大小分析+攻击代价评估
    y = [int(i / 10545528  * 100.0) for i in y]
    x = [j for j in range(0, 1093, 1)]
    print(y)
    plt.rcParams['figure.figsize'] = (6.5, 4.5)
    plt.plot(x, y, c='black', linewidth=0.4)
    y_ticks = range(110)
    plt.yticks(y_ticks[::10])
    x_ticks = range(1093)
    plt.xticks(x_ticks[::100])
    plt.xlim((1, 1100))
    plt.ylim((0, 100))
    plt.grid(True, linestyle='--', alpha=0.3)
    plt.xlabel("Number of snapshots")
    plt.ylabel("% of address pairs")
    plt.savefig('snapshots-filtering.png', dpi=300)
    # plt.title("可建立连接数的分布折线图")
    plt.show()
    return


def reverse_start():
    with open("results/attackcost/0715/filteringByNodeInfo_1657697413.json", 'r+') as f:
        filtering = json.loads(f.read())
    with open("results/attackcost/0715/target_nodes.json", 'r+') as f:
        target_nodes = json.loads(f.read())

    filtering = [str(x) for x in filtering]
    print("过滤掉的地址对数为" + str(len(filtering)))

    total = []
    for i in range(0, len(target_nodes)):
        for j in range(i+1, len(target_nodes)):
            total.append([i, j])
    print("total ok")
    total = [str(x) for x in total]
    remaining = list(set(total).difference(set(filtering)))
    remaining = [json.loads(x) for x in remaining]
    print("剩余待处理的地址对数为" + str(len(remaining)))
    with open("results/attackcost/0715/remaining.json", 'w+') as f:
        f.write(json.dumps(remaining))


if __name__ == "__main__":
    # crawlNodeSnapshots(1657900800,1657555200)
    # filteringByNodeInfo(1657900800,1657555200)
    # reverse_start()
    # reverse_filteringByNodeInfo(1657900800, 1657555200)
    # tmp()
    # calculateNodeInfo()
    # calculateRemainingPeers()
    # analysisPoolSize()
    test()
    # filteringByCacheInfo('2022-07-17')